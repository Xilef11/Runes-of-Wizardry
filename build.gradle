import java.util.regex.Pattern
//--- build aliases : define a synonym here if you want a shortcut to run multiple targets
 //https://caffeineinduced.wordpress.com/2015/01/25/run-a-list-of-gradle-tasks-in-specific-order/
def buildAliases = [
   'release' : ['setReleaseNumber', 'build', 'githubRelease', 'curseforge', 'incrementBuildNumber']
   //'release' : ['setReleaseNumber', 'build']
]
def expandedTaskList = []
 
gradle.startParameter.taskNames.each {
   expandedTaskList << (buildAliases[it] ? buildAliases[it] : it)
}
 
gradle.startParameter.taskNames = expandedTaskList.flatten()
 
println "\n\texpanded task list: ${gradle.startParameter.taskNames }\n"

// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
		maven {
			url "https://plugins.gradle.org/m2/"
		}
		
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
		classpath 'co.riiid:gradle-github-plugin:0.4.2'
		classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.0.7"
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'co.riiid.gradle' 
apply plugin: "com.matthewprenger.cursegradle"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

//MC stuff
def majorVersion = "0"
def minorVersion = "8"
def bugfix = ".3"
def devVersion = "-dev"
def forgeVersion="1.12-14.21.1.2387"
def mcVersion = forgeVersion.substring(0,forgeVersion.indexOf('-'))
def baublesversion="1.11-1.4.5"
def jeiversion = "1.12:4.7.1.69"

def username = 'ForgeDevName'
//set from command line with -Pdev_username=name
if (project.hasProperty('dev_username'))
username = "${dev_username}"

version = "${mcVersion}-${majorVersion}.${minorVersion}${bugfix}${devVersion}"
group= "com.zpig333.runesofwizardry"
archivesBaseName = project.name

//must be run before all other configs (but after initially setting the version)
task('setReleaseNumber') {
	//println "setRelease: config"
	if(gradle.startParameter.taskNames.contains('setReleaseNumber')){
		print "setReleaseNumber changing "+project.version+" to "
		project.setProperty('version',"${mcVersion}-${majorVersion}.${minorVersion}${bugfix}")
		println project.version
	}
}

minecraft {
    version = forgeVersion

    runDir = "minecraft"
    
    clientRunArgs += "-username=${username}"
	
	// the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
	mappings = "snapshot_20170624"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
	
	replaceIn "RunesOfWizardry.java"
	replace "@MOD_VERSION@", project.version
}
repositories {
  //JEI
  maven {
    url "http://dvs1.progwml6.com/files/maven"
  }
  ivy{
	url "https://dl.dropboxusercontent.com/u/47135879/"
	//artifactPattern "https://dl.dropboxusercontent.com/u/47135879/[artifact]-[revision]-[classifier].[ext]"
	layout "pattern" , {
		artifact "[artifact]-[revision](-[classifier]).[ext]"
	}
  }
}
dependencies {
       // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
	//JEI
	deobfCompile "mezz.jei:jei_"+jeiversion+":api"
	runtime "mezz.jei:jei_"+jeiversion
	
	//deobfProvided "baubles:Baubles:"+baublesversion//+":api"
	//runtime "baubles:Baubles:"+baublesversion
	
	//compile files(
	//	'libs/Baubles-'+baublesversion+'-deobf.jar'
	//)
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
	//we don't need the unused images in the builds
	exclude 'dev_images/'
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
       //we don't need the unused images in the builds
        //exclude 'dev_images/**'
    }
}

task deobfJar(type: Jar, dependsOn: 'jar') {
    from "build/classes/main"
	from "build/resources/main"
    classifier "deobf"
}
artifacts {
    archives deobfJar
}

//custom tasks and configs

task('incrementBuildNumber') << {
//http://stackoverflow.com/questions/17448565/how-to-autoincrement-versioncode-in-android-gradle
	def buildscript = file("build.gradle")
	def manifestContent=""
	def versionCode=""
	def buildnum=""
	if(bugfix.length()==0){
		def pattern = Pattern.compile("minorVersion = \"(\\d+)\"")
		def text = buildscript.getText()
		def matcher = pattern.matcher(text)
		matcher.find()
		versionCode = Integer.parseInt(matcher.group(1))
		manifestContent = matcher.replaceAll("minorVersion = \"" + ++versionCode + "\"")
		buildnum="${mcVersion}-${majorVersion}.${versionCode}${bugfix}${devVersion}"
		println "incremented build number to ${buildnum}"
	}else{
		def pattern = Pattern.compile("bugfix = \"\\.(\\d+)\"")
		def text = buildscript.getText()
		def matcher = pattern.matcher(text)
		matcher.find()
		versionCode = Integer.parseInt(matcher.group(1))
		manifestContent = matcher.replaceAll("bugfix = \"." + ++versionCode + "\"")
		buildnum = "${mcVersion}-${majorVersion}.${minorVersion}.${versionCode}${devVersion}"
		println "incremented build number to ${buildnum}"
	}
	
    buildscript.write(manifestContent)
	
	//clear changelog
	file("changelog.md").write("")
	
	//commit
	"git commit -a -m \"Increment version to ${buildnum} after release\"".execute()
	//"git push".execute()//push the updated build number
}

task gitPush << {
		"git push".execute()
}


//https://github.com/riiid/gradle-github-plugin
githubRelease.onlyIf{project.hasProperty('githubKey')}
githubRelease.dependsOn(gitPush)//make sure everything is pushed before release so github tags the right thing
github {
	if(project.hasProperty('githubKey')){
		//println "github: "+project.version
		owner = 'Xilef11'
		repo = 'Runes-of-Wizardry'
		token = project.githubKey
		tagName = 'v'+project.version
		name=tagName
		targetCommitish = 'master'
		draft=false
		prerelease = project.version.contains(devVersion)
		body = "Changelog:\n"+new File('changelog.md').getText()+"\n\nBuilt with Forge "+forgeVersion+"\nMappings: "+minecraft.mappings+"\nBaubles: "+baublesversion+"\nJEI: "+jeiversion
		assets = [
				"build/libs/${project.archivesBaseName}-${project.version}.jar"
				,"build/libs/${project.archivesBaseName}-${project.version}-deobf.jar"
		]
	}else{
		println "no GitHub token found as project.githubKey"
	}
}

//https://github.com/matthewprenger/CurseGradle
tasks.curseforge.onlyIf{project.hasProperty('curseKey')}
curseforge {
if(project.hasProperty('curseKey')){
	  apiKey = project.curseKey
	  project {
		id = '235927'
		//version pulled from ForgeGradle includes java 6
		changelogType='markdown'
		changelog = file('changelog.md').getText()+"\n\nBuilt with Forge "+forgeVersion+"\nBaubles: "+baublesversion+"\nJEI: "+jeiversion
		//releaseType = !project.version.contains(devVersion) ? 'release' : 'alpha'
		releaseType = !project.version.contains(devVersion) ? 'beta' : 'alpha'
		mainArtifact jar
	  }
  }else{
	println "no CurseForge key found as project.curseKey"
  }
}